# -*- coding: utf-8 -*-
"""Activity_Structure your data.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RQBIQNJlYnjhJgR0GBoeHMigb0bRTg3V

# Activity: Structure your data

## Introduction

In this activity, you will practice structuring, an **exploratory data analysis (EDA)** step that helps data science projects move forward. During EDA, when working with data that contains aspects of date and time, "datetime" transformations are integral to better understanding the data. As a data professional, you will encounter datatime transformations quite often as you determine how to format your data to suit the problems you want to solve or the questions you want to answer. This activity gives you an opportunity to apply these skills and prepare you for future EDA, where you will need to determine how best to structure your data.

In this activity, you are a member of an analytics team that provides insights to an investing firm. To help them decide which companies to invest in next, the firm wants insights into **unicorn companies**â€“companies that are valued at over one billion dollars.  

You will work with a dataset about unicorn companies, discovering characteristics of the data, structuring the data in ways that will help you draw meaningful insights, and using visualizations to analyze the data. Ultimately, you will draw conclusions about what significant trends or patterns you find in the dataset. This will develop your skills in EDA and your knowledge of functions that allow you to structure data.

## Step 1: Imports

### Import relevant libraries and modules

Import the relevant Python libraries and modules that you will need to use. In this activity, you will use `pandas`, `numpy`, `seaborn`, and `matplotlib.pyplot`.
"""

# Import the relevant Python libraries and modules needed in this lab.

### YOUR CODE HERE ###
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

"""### Load the dataset into a DataFrame

The dataset provided is in the form of a csv file named `Unicorn_Companies.csv` and contains a subset of data on unicorn companies. As shown in this cell, the dataset has been automatically loaded in for you. You do not need to download the .csv file, or provide more code, in order to access the dataset and proceed with this lab. Please continue with this activity by completing the following instructions.
"""

# RUN THIS CELL TO IMPORT YOUR DATA.

### YOUR CODE HERE ###
companies = pd.read_csv("Unicorn_Companies.csv")

"""<details>
  <summary><h4><strong>Hint 1</strong></h4></summary>

Use the `read_csv()` function from `pandas` to read data from a csv file and load it into a DataFrame.

</details>

<details>
  <summary><h4><strong>Hint 2</strong></h4></summary>

Call `read_csv()` and pass in the name of the csv file as a string.

</details>

## Step 2: Data exploration

### Display the first 10 rows of the data

In this section, you will discover what the dataset entails and answer questions to guide your exploration and analysis of the data. This is an important step in EDA.

To begin, display the first 10 rows of the data to get an understanding of how the dataset is structured.
"""

# Display the first 10 rows of the data.

### YOUR CODE HERE ###

companies.head(10)

"""<details>
  <summary><h4><strong>Hint 1</strong></h4></summary>

Refer to [the content about exploratory data analysis in Python](https://www.coursera.org/learn/go-beyond-the-numbers-translate-data-into-insight/lecture/kfl9b/find-stories-using-the-six-exploratory-data-analysis-practices).

</details>

<details>
  <summary><h4><strong>Hint 2</strong></h4></summary>

Use the function in the `pandas` library that allows you to get a specific number of rows from the top of a DataFrame.


</details>

<details>
  <summary><h4><strong>Hint 3</strong></h4></summary>

  Call the `head()` function from the `pandas` library and pass in the number of rows you want from the top of the DataFrame.

</details>

### Identify the number of rows and columns

Identify the number of rows and columns in the dataset. This will help you get a sense of how much data you are working with.
"""

# Identify the number of rows and columns in the dataset.

### YOUR CODE HERE ###

num_rows, num_cols = companies.shape
print("Number of rows:", num_rows)
print("Number of columns:", num_cols)

"""<details>
  <summary><h4><strong>Hint 1</strong></h4></summary>

Refer to [the content about exploratory data analysis in Python](https://www.coursera.org/learn/go-beyond-the-numbers-translate-data-into-insight/lecture/kfl9b/find-stories-using-the-six-exploratory-data-analysis-practices).

</details>

<details>
  <summary><h4><strong>Hint 2</strong></h4></summary>

Use the property that DataFrames in `pandas` have to display the number of rows and the number of columns as a tuple.


</details>

<details>
  <summary><h4><strong>Hint 3</strong></h4></summary>

The `shape` property that DataFrames have can help.

</details>

**Question:** What do you notice about the number of rows and columns in the dataset?

From "unicorn_companies.csv" dataset, there are 1074 for number of rows and 10 for number of columns

### Check for duplicates in the data
"""

# Check for duplicates.

### YOUR CODE HERE ###
duplicates = companies.duplicated()
num_duplicates = duplicates.sum()
print("Number of duplicates:", num_duplicates)

"""<details>
  <summary><h4><strong>Hint 1</strong></h4></summary>

Refer to [the content about exploratory data analysis in Python](https://www.coursera.org/learn/go-beyond-the-numbers-translate-data-into-insight/lecture/kfl9b/find-stories-using-the-six-exploratory-data-analysis-practices).

</details>

<details>
  <summary><h4><strong>Hint 2</strong></h4></summary>

Use the function in `pandas` that can be called on a DataFrame to return the same DataFrame but with duplicates removed.

Use property that DataFrames in `pandas` have that to display the number of rows and columns as a tuple.

</details>

<details>
  <summary><h4><strong>Hint 3</strong></h4></summary>

Call the `drop_duplicates()` function on `companies`, followed by calling the `shape` property.

Compare the shape that is returned from this to the original shape of `companies`, which you identified previously.

</details>

**Question:** Based on the preceding output, are there any duplicates in the dataset?

There are no duplicates from the dataset as illustrated from the preceeding output.

### Display the data types of the columns

Knowing the data types of the columns is helpful because it indicates what types of analysis and aggregation can be done, how a column can be transformed to suit specific tasks, and so on. Display the data types of the columns.
"""

# Display the data types of the columns.Knowing the data types of the columns is helpful because it indicates what types of analysis and aggregation can be done, how a column can be transformed to suit specific tasks, and so on. Display the data types of the columns.

### YOUR CODE HERE ###
data_types = companies.dtypes
print(data_types)

"""<details>
  <summary><h4><strong>Hint 1</strong></h4></summary>

Refer to [the content about exploratory data analysis in Python](https://www.coursera.org/learn/go-beyond-the-numbers-translate-data-into-insight/lecture/kfl9b/find-stories-using-the-six-exploratory-data-analysis-practices).

</details>

<details>
  <summary><h4><strong>Hint 2</strong></h4></summary>

Use the property that DataFrames in `pandas` have to display the data types of the columns in the specified DataFrame.


</details>

<details>
  <summary><h4><strong>Hint 3</strong></h4></summary>

The `dtypes` property that DataFrames have can help.

</details>

**Question:** What do you notice about the data types of the columns in the dataset?

The dataset has two dtypes which comprise of "object" and "int64." Among the 10 Columns, only 1 column has the dtype int64.

**Question:** How would you sort this dataset in order to get insights about when the companies were founded?

To get insights about when the companies were founded, you would sort the dataset in ascending order based on the 'Year Founded' column

### Sort the data

In this section, you will continue your exploratory data analysis by structuring the data. This is an important step in EDA, as it allows you to glean valuable and interesting insights about the data afterwards.

To begin, sort the data so that you can get insights about when the companies were founded. Consider whether it would make sense to sort in ascending or descending order based on what you would like to find.
"""

# Sort `companies` and display the first 10 rows of the resulting DataFrame.

### YOUR CODE HERE ###

sorted_df = companies.sort_values('Date Joined')
sorted_df.head(10)

"""<details>
  <summary><h4><strong>Hint 1</strong></h4></summary>

Refer to [the content about exploratory data analysis in Python](https://www.coursera.org/learn/go-beyond-the-numbers-translate-data-into-insight/lecture/kfl9b/find-stories-using-the-six-exploratory-data-analysis-practices).

</details>

<details>
  <summary><h4><strong>Hint 2</strong></h4></summary>

Use the function in `pandas` that allows you to sort a DataFrame along a specific column.

</details>

<details>
  <summary><h4><strong>Hint 3</strong></h4></summary>

Use the `sort_values()` function, specifying the `by` parameter as the name of the column that you want to sort by and the `ascending` parameter as needed. Note that by default, `ascending` is set to `True`. If you want to sort in descending order, specify the `ascending` parameter as `False`.

</details>

**Question:** What do you observe from the sorting that you performed?

The dataset was sorted based on the "Date Joined" and it was known that "LinkSure Network" was the first company categorized under Unicorn companies in the year 2013 when the made their valuation worth $1B.

**Question:** How would you find out how many companies in this dataset were founded each year?

To find out how many companies were founded each year in the dataset, you can use the value_counts() method on the "Year Founded" column.The python code below can be use to achieve this.
year_counts = companies['Year Founded'].value_counts()

### Determine the number of companies founded each year

Find out how many companies in this dataset were founded each year. Make sure to display each unique `Year Founded` that occurs in the dataset, and for each year, a number that represents how many companies were founded then.
"""

# Display each unique year that occurs in the dataset
# along with the number of companies that were founded in each unique year.

### YOUR CODE HERE ###
year_counts = companies['Year Founded'].value_counts().sort_index()
print(year_counts)

"""<details>
  <summary><h4><strong>Hint 1</strong></h4></summary>

Refer to [the content about exploratory data analysis in Python](https://www.coursera.org/learn/go-beyond-the-numbers-translate-data-into-insight/lecture/kfl9b/find-stories-using-the-six-exploratory-data-analysis-practices).

</details>

<details>
  <summary><h4><strong>Hint 2</strong></h4></summary>

Use the function in `pandas` that allows you to get the count for each distinct value in a specific column.

</details>

<details>
  <summary><h4><strong>Hint 3</strong></h4></summary>

Use the `value_counts()` function on the `Year Founded` column.

</details>

**Question:** What do you observe from the counts of the unique `Year Founded` values in the dataset?

The dataset illustrates that, 155 companies were founded in 2015 while only one company was funded from 1919 to 1997 except 1994 and 1995 which had two companies funded.

**Question:** How would you transform the `Date Joined` column to gain more meaning from it?

To gain more meaning from the "Date Joined" column, you can transform it into a datetime format. This will allow you to perform various operations and extract meaningful information such as year, month, and day.

### Convert the `Date Joined` column to datetime

Convert the `Date Joined` column to datetime. This will split each value into year, month, and date components, allowing you to later gain insights about when a company gained unicorn status with respect to each component.
"""

# Convert the `Date Joined` column to datetime.
# Update the column with the converted values.

### YOUR CODE HERE ###
companies['Date Joined'] = pd.to_datetime(companies['Date Joined'])
companies['Year Joined'] = companies['Date Joined'].dt.year
companies['Month Joined'] = companies['Date Joined'].dt.month
companies['Day Joined'] = companies['Date Joined'].dt.day




# Display the data types of the columns in `companies`
# to confirm that the update actually took place.

### YOUR CODE HERE ###
print(companies.dtypes)

"""<details>
  <summary><h4><strong>Hint 1</strong></h4></summary>

Refer to [the content about datetime transformations in Python](https://www.coursera.org/learn/go-beyond-the-numbers-translate-data-into-insight/supplement/ZcM4z/reference-guide-datetime-manipulation).

</details>

<details>
  <summary><h4><strong>Hint 2</strong></h4></summary>

Use the function in `pandas` that allows you to convert an object to datetime format.

Use the property that DataFrames have that can be used to display the data types of the columns.

</details>

<details>
  <summary><h4><strong>Hint 3</strong></h4></summary>

Use the `to_datetime()` function on the `Date Founded` column.

Make sure to update the column by reassigning to the result of the function call mentioned previously.

Use the `dtypes` property to get the data types of the columns in `companies`.

</details>

**Question:** How would you obtain the names of the months when companies gained unicorn status?

To obtain the names of the months when companies gained unicorn status, you can use the .dt.month_name() method on the updated "Date Joined" column. This method will extract the month component from the datetime values and return the corresponding month names.

### Create a `Month Joined` column

Obtain the names of the months when companies gained unicorn status, and use the result to create a `Month Joined` column.
"""

# Obtain the names of the months when companies gained unicorn status.
# Use the result to create a `Month Joined` column.

### YOUR CODE HERE ###
companies["Month Joined"] = companies["Date Joined"].dt.month_name()



# Display the first few rows of `companies`
# to confirm that the new column did get added.

### YOUR CODE HERE ###
companies.head()

"""<details>
  <summary><h4><strong>Hint 1</strong></h4></summary>

Refer to [the content about extracting components from datetime objects in Python](https://www.coursera.org/learn/go-beyond-the-numbers-translate-data-into-insight/lecture/Vh13u/use-structuring-methods-to-establish-order-in-your-dataset).

</details>

<details>
  <summary><h4><strong>Hint 2</strong></h4></summary>

Use the function in the `pandas` library that contains datetime strings in order to extract the month names.

Use the function in the `pandas` library that allows you to display the first few rows of a DataFrame.

</details>

<details>
  <summary><h4><strong>Hint 3</strong></h4></summary>

Use the `dt.month_name()` function on the `Date Founded` column.

Use a pair of square brackets to create a new column. Make sure to specify the name of the new column inside the brackets and assign the column to the result of calling the function mentioned previously.

Use the `head()` function to display the first few rows of a DataFrame.

</details>

**Question:** How would you determine how many years it took for companies to reach unicorn status?

To determine how many years it took for companies to reach unicorn status, we can calculate the difference between the "Year Founded" and "Year Joined" columns.

### Create a `Years To Join` column

Determine how many years it took for companies to reach unicorn status, and use the result to create a `Years To Join` column. Adding this to the dataset can help you answer questions you may have about this aspect of the companies.
"""

# Determine how many years it took for companies to reach unicorn status.
# Use the result to create a `Years To Join` column.

### YOUR CODE HERE ###

companies['Years To Join'] = companies['Year Joined'] - companies['Year Founded']



# Display the first few rows of `companies`
# to confirm that the new column did get added.

### YOUR CODE HERE ###

companies.head()

"""<details>
  <summary><h4><strong>Hint 1</strong></h4></summary>

Refer to [the content about extracting components from datetime objects in Python](https://www.coursera.org/learn/go-beyond-the-numbers-translate-data-into-insight/lecture/Vh13u/use-structuring-methods-to-establish-order-in-your-dataset).

</details>

<details>
  <summary><h4><strong>Hint 2</strong></h4></summary>

Use the property in the `pandas` library that contains datetime strings in order to extract the year components.

Use the function in the `pandas` library that allows you to display the first few rows of a DataFrame.

</details>

<details>
  <summary><h4><strong>Hint 3</strong></h4></summary>

Use the `dt.year` property on the `Date Joined` column to obtain the years that companies became unicorns.

Obtain the arithmetic difference elementwise between two series in `pandas` by using the subtraction operator.  

Use a pair of square brackets to create a new column. Make sure to specify the name of the new column inside the brackets and assign the column to the result of calling the function mentioned previously.

Use the `head()` function can to display the first few rows of a DataFrame.

</details>

**Question:** Which year would you like to gain more insight on with respect when companies attained unicorn status, and why?

To gain more insight into the year when companies attained unicorn status, it would be helpful to focus on the most recent year in the dataset. This is because the recent year would provide more relevant and up-to-date information about the current trends and patterns in unicorn company growth. By analyzing the companies that recently achieved unicorn status, we can better understand the industries, regions, and other factors that contribute to their success. Additionally, studying the most recent year can provide insights into the overall health and growth of the unicorn ecosystem.

### Gain more insight on a specific year

To gain more insight on the year of that interests you, filter the dataset by that year and save the resulting subset into a new variable.
"""

# Filter dataset by a year of your interest (in terms of when companies reached unicorn status).
# Save the resulting subset in a new variable.

### YOUR CODE HERE ###


companies_2015 = companies[companies["Year Joined"] == 2015]

# Display the first few rows of the subset to confirm that it was created.

### YOUR CODE HERE ###

companies_2015.head()

"""<details>
  <summary><h4><strong>Hint 1</strong></h4></summary>

Refer to [the content about structuring data in Python](https://www.coursera.org/learn/go-beyond-the-numbers-translate-data-into-insight/lecture/Vh13u/use-structuring-methods-to-establish-order-in-your-dataset).

</details>

<details>
  <summary><h4><strong>Hint 2</strong></h4></summary>

Use the property in the `pandas` library that contains datetime strings in order to extract the year components.

Use square brackets to filter a DataFrame in order get a subset of the data. Make sure to specify an appropriate condition inside those brackets. The condition should convey which year you want to filter by. The rows that meet the condition are the rows that will be selected.

Use the function in the `pandas` library that allows you to display the first few rows of a DataFrame.

</details>

<details>
  <summary><h4><strong>Hint 3</strong></h4></summary>

Use the `dt.year` property on the `Date Joined` column to obtain the years that companies became unicorns.

Make sure to create a new variable and assign it to the subset.

Use the `head()` function to display the first few rows of a DataFrame.

</details>

**Question:** What structuring approach would you take to observe trends over time in the companies that became unicorns in the year that interests you?

To observe trends over time in the companies that became unicorns in a specific year, I would use a line plot or a bar plot to visualize the changes in key metrics over time. I would consider plotting the valuation of companies over time, the number of companies founded each year, or any other relevant metrics that provide insights into the growth and success of these companies.

### Observe trends over time

Implement the structuring approach that you have identified to observe trends over time in the companies that became unicorns for the year that interests you.
"""

# After identifying the time interval that interests you, proceed with the following:
# Step 1. Take the subset that you defined for the year of interest.
#         Insert a column that contains the time interval that each data point belongs to, as needed.
# Step 2. Group by the time interval.
#         Aggregate by counting companies that joined per interval of that year.
#         Save the resulting DataFrame in a new variable.

### YOUR CODE HERE ###
# Filter the dataset for the year 2015
year_2015_data = companies[companies['Year Joined'] == 2015]

# Add a column for the time interval
year_2015_data['Time Interval'] = pd.cut(year_2015_data['Years To Join'], bins=[0, 1, 2, 5, 10, float('inf')], labels=['<1 year', '1-2 years', '2-5 years', '5-10 years', '>10 years'])

# Group by the time interval and count the number of companies
grouped_data = year_2015_data.groupby('Time Interval').size().reset_index(name='Count')


# Display the first few rows of the new DataFrame to confirm that it was created

### YOUR CODE HERE ###
grouped_data

"""<details>
  <summary><h4><strong>Hint 1</strong></h4></summary>

Refer to [the content about structuring data in Python](https://www.coursera.org/learn/go-beyond-the-numbers-translate-data-into-insight/lecture/Vh13u/use-structuring-methods-to-establish-order-in-your-dataset).

</details>

<details>
  <summary><h4><strong>Hint 2</strong></h4></summary>

To obtain the data in a specific periodic datetime format, call a function in the `pandas` library on a series that contains datetime strings.   

Keep in mind that currently, the `Valuation` column is of data type `object` and contains `$` and `B` to indicate that each amount is in billions of dollars.

Call functions in the `pandas` library to achieve the following tasks:
  - Apply a function to each value in the series.
  - Cast each value in the series to a specified data type.

Use a pair of square brackets to access a particular column from the result of grouping a DataFrame.

Use these functions in the `pandas` library to achieve the following tasks:
- Concatenate two DataFrames together
- Drop columns that you do not need from a DataFrame
- Group a DataFrame by a specific column
- Compute the average value for each group
- Reset the index so that the column that you grouped on also appears as a column after the grouping (instead of remaining an index)
- Rename columns in a DataFrame
- Display the first few rows of a DataFrame

</details>

<details>
  <summary><h4><strong>Hint 3</strong></h4></summary>

Use `dt.strftime('%Y-W%V')` on the `Date Joined` column to obtain the weeks that companies became unicorns.

Use these functions in `pandas` to acheive the following tasks:
- `groupby()` to group a DataFrame by a specific column
- `count()` to count the number of rows that belong to each group
- `reset_index()` to reset the index so that the column that you grouped on also appears as a column after the grouping (instead of remaining an index)
- `rename()` to rename the columns in a DataFrame
- `head()` to display the first few rows of a DataFrame

</details>

**Question:** How would you structure the data to observe trends over time in the average valuation of companies that joined in the year you expressed interest in earlier compared to another year?**

To observe trends over time in the average valuation of companies that joined in a specific year (e.g., 2015) compared to another year, you can follow the steps below:

Step 1: Create subsets for the two years of interest (e.g., 2015 and another year).
Step 2: Calculate the average valuation for each year.
Step 3: Create a DataFrame to store the results.
Step 4: Visualize the results using a bar plot.

### Compare trends over time

Implement the structuring approach that you have identified in order to compare trends over time in the average funding of companies that became unicorns between your years of interest. Keep in mind the data type of the `Valuation` column and what the values in that column contain currently.
"""

# After identifying the additional year and time interval of interest, proceed with the following:
# Step 1. Filter by the additional year to create a subset that consists of companies that joined in that year.
# Step 2. Concatenate that new subset with the subset that you defined previously.
# Step 3. As needed, add a column that contains the time interval that each data point belongs to,
#         in the concatenated DataFrame.
# Step 4. Transform the `Valuation` column as needed.
# Step 5. Group by the time interval.
#         Aggregate by computing average funding of companies that joined per interval of the corresponding year.
#         Save the resulting DataFrame in a new variable.

### YOUR CODE HERE ###

# Step 1: Filter by the year 2016
year_2016_data = companies[companies['Year Joined'] == 2016]

# Step 2: Concatenate the data for years 2015 and 2016
combined_data = pd.concat([year_2015_data, year_2016_data])

# Step 3: Add a column for the time interval
combined_data['Time Interval'] = pd.cut(combined_data['Years To Join'], bins=[0, 5, float('inf')], labels=['<5 years', '>=5 years'])

# Step 4: Transform the 'Valuation' column
combined_data['Valuation'] = combined_data['Valuation'].str.replace('$', '').str.replace('B', '').astype(float)

# Step 5: Group by the time interval and compute average valuation
grouped_data = combined_data.groupby(['Year Joined', 'Time Interval'])['Valuation'].mean().reset_index()


# Display the first few rows of the new DataFrame to confirm that it was created.

### YOUR CODE HERE ###
grouped_data.head()

"""<details>
  <summary><h4><strong>Hint 1</strong></h4></summary>

Refer to [the content about manipulating data in Python](https://www.coursera.org/learn/go-beyond-the-numbers-translate-data-into-insight/lecture/0GjvK/date-string-manipulations-with-python).

</details>

<details>
  <summary><h4><strong>Hint 2</strong></h4></summary>

To obtain the data in a specific periodic datetime format, call a function in the `pandas` library on a series that contains datetime strings.   

Keep in mind that currently, the `Valuation` column is of data type `object` and contains `$` and `B` to indicate that each amount is in billions of dollars.

Call functions in the `pandas` library on a series to acheive the following tasks:
  - Apply a function to each value in the series.
  - Cast each value in the series to a specified data type.

Use a pair of square brackets to access a particular column from the result of grouping a DataFrame.

These functions in the `pandas` library can help achieve the following tasks:
- Concatenate two DataFrames together
- Drop columns that you do not need from a DataFrame
- Group a DataFrame by a specific column
- Compute the average value for each group
- Reset the index so that the column that you grouped on also appears as a column after the grouping (instead of remaining an index)
- Rename columns in a DataFrame
- Display the first few rows of a DataFrame

</details>

<details>
  <summary><h4><strong>Hint 3</strong></h4></summary>

Use `.dt.to_period('Q').dt.strftime('%Y-Q%q')` on the `Date Joined` column to obtain the quarters during which companies became unicorns.

Call `apply(lambda v: v.strip("$B"))` on the `Valuation` column to remove the `$` and `B` from each value.

Use the following functions in `pandas` to acheive the following tasks:
- `concat` to concatenate two DataFrames together (note: this function takes in a list of DataFrames and returns a DataFrame that contains all rows from both inputs)
- `drop()` to drop columns that you do not need from a DataFrame
- `groupby()` to group a DataFrame by a specific column
- `mean()` to compute the average value for each group
- `reset_index()` to reset the index so that the column that you grouped on also appears as a column after the grouping (instead of remaining an index)
- `rename()` to rename the columns in a DataFrame
- `head()` to display the first few rows of a DataFrame

</details>

## Step 3: Statistical tests

### Visualize the time it took companies to become unicorns

Using the `companies` dataset, create a box plot to visualize the distribution of how long it took companies to become unicorns, with respect to the month they joined.
"""

# Define a list that contains months in chronological order.

### YOUR CODE HERE ###
# Define a list of months in chronological order
months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']

# Print the list of months

# Print out the list to confirm it is correct.

### YOUR CODE HERE ###
months

# Create the box plot
# to visualize the distribution of how long it took companies to become unicorns,
# with respect to the month they joined.
# Make sure the x-axis goes in chronological order by month, using the list you defined previously.
# Plot the data from the `companies` DataFrame.

### YOUR CODE HERE ###

# Define a list of months in chronological order
months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']

# Create the box plot
plt.figure(figsize=(10, 6))
sns.boxplot(x='Month Joined', y='Years To Join', data=companies, order=months)


# Set the title of the plot.

### YOUR CODE HERE ###

plt.title('Distribution of Years to Join by Month Joined')

# Rotate labels on the x-axis as a way to avoid overlap in the positions of the text.

### YOUR CODE HERE ###
plt.xticks(rotation=45)



# Display the plot.

### YOUR CODE HERE ###
plt.show()

"""<details>
  <summary><h4><strong>Hint 1</strong></h4></summary>

Refer to [the content about creating a box plot](https://www.coursera.org/learn/go-beyond-the-numbers-translate-data-into-insight/lecture/Pf6KW/eda-structuring-with-python).

</details>

<details>
  <summary><h4><strong>Hint 2</strong></h4></summary>

Use the function in the `seaborn` library that allows you to create a box plot.

Use the functions in the `matplotlib.pyplot` module that allow you to acheive the following tasks:
- set the title of a plot
- rotate labels on the x-axis of a plot
- display a plot

</details>

<details>
  <summary><h4><strong>Hint 3</strong></h4></summary>

Use the `boxplot()` function from `seaborn` to create a box plot, passing in the parameters `x`, `y`, `order`, and `showfliers`. To keep outliers from appearing on the box plot, set `showfliers` to `False`.

Use following functions to achieve the following tasks:
- `plt.title()` to set the title of a plot
- `plt.xticks()` to rotate labels on the x-axis of a plot
- pass in the parameters `rotation=45, horizontalalignment='right'`to rotate the labels by 45 degrees and align the labels to the right
- `plt.show()` to display a plot

</details>

**Question:** What do you observe from the preceding box plot?

By comparing the boxes and whiskers for different months, we can observe the variation in the time it took for companies to become unicorns based on when they joined. Months with wider boxes and longer whiskers indicate higher variability in the duration, while months with narrower boxes and shorter whiskers indicate lower variability.

## Step 4: Results and evaluation

### Visualize the time it took companies to reach unicorn status

In this section, you will evaluate the result of structuring the data, making observations, and gaining further insights about the data.

Using the `companies` dataset, create a bar plot to visualize the average number of years it took companies to reach unicorn status with respect to when they were founded.
"""

# Set the size of the plot.

### YOUR CODE HERE ###
plt.figure(figsize=(10, 6))


# Create bar plot to visualize the average number of years it took companies to reach unicorn status
# with respect to when they were founded.
# Plot data from the `companies` DataFrame.

### YOUR CODE HERE ###
plt.bar(companies['Year Founded'], companies['Years To Join'].mean())


# Set title

### YOUR CODE HERE ###
plt.title('Average Years to Reach Unicorn Status by Year Founded')



# Set x-axis label

### YOUR CODE HERE ###
plt.xlabel('Year Founded')



# Set y-axis label

### YOUR CODE HERE ###
plt.ylabel('Average Years to Reach Unicorn Status')


# Rotate the labels on the x-axis as a way to avoid overlap in the positions of the text.

### YOUR CODE HERE ###
plt.xticks(rotation=90)

# Display the plot.

### YOUR CODE HERE ###
plt.show()

"""<details>
  <summary><h4><strong>Hint 1</strong></h4></summary>

Refer to [the content about creating a bar plot](https://www.coursera.org/learn/go-beyond-the-numbers-translate-data-into-insight/lecture/0GjvK/date-string-manipulations-with-python).

</details>

<details>
  <summary><h4><strong>Hint 2</strong></h4></summary>

Use the function in the `seaborn` library that allows you to create a bar plot where the height of each bar is the average value for the corresponding category, by default.

Use the functions in the `matplotlib.pyplot` module that allow you to set the size, title, x-axis label, and y-axis label of plots. In that module, there are also functions for rotating the labels on the x-axis and displaying the plot.

</details>

<details>
  <summary><h4><strong>Hint 3</strong></h4></summary>

Use the `barplot()` function from `seaborn`, passing in the parameters `x`, `y`, and `ci`. To keep confidence interval lines from appearing on the bar plot,  set `ci` to `False`.

Use `plt.figure()`, passing in the `figsize` parameter to set the size of a plot.

Use `plt.title()`, `plt.xlabel()`, `plt.ylabel()` to set the title, x-axis label, and y-axis label, respectively.

Use `plt.xticks()` to rotate labels on the x-axis of a plot. Paass in the parameters `rotation=45, horizontalalignment='right'` to rotate the labels by 45 degrees and align the labels to the right.

Use `plt.show()` to display a plot.

</details>

**Question:** What do you observe from the bar plot of years to join with respect to the year founded?

[Write your response here. Double-click (or enter) to edit.]

### Visualize the number of companies that joined per interval

Using the subset of companies joined in the year of interest, grouped by the time interval of your choice, create a bar plot to visualize the number of companies that joined per interval for that year.
"""

# Set the size of the plot.

### YOUR CODE HERE ###

plt.figure(figsize=(10, 6))

# Create bar plot to visualize number of companies that joined per interval for the year of interest.

### YOUR CODE HERE ###
subset = companies[companies['Year Joined'] == 2015].groupby('Time Interval').count()

# Reset index to include all time intervals
subset = subset.reindex(range(1, 13), fill_value=0)

# Reset the index and rename the columns for better visualization
subset = subset.reset_index()
subset = subset.rename(columns={'Company': 'Number of Companies Joined'})


plt.figure(figsize=(10, 6))
plt.bar(subset['Time Interval'], subset['Number of Companies Joined'])
plt.title('Number of Companies Joined per Interval (Year of Interest)')
plt.xlabel('Time Interval')
plt.ylabel('Number of Companies Joined')
plt.xticks(rotation=90)
plt.show()


# Set the x-axis label.

### YOUR CODE HERE ###
#plt.xlabel('Time Interval')


# Set the y-axis label.

### YOUR CODE HERE ###
#plt.ylabel('Number of Companies Joined')


# Set the title.

### YOUR CODE HERE ###
#plt.title('Number of Companies Joined per Interval (Year of Interest)')


# Rotate labels on the x-axis as a way to avoid overlap in the positions of the text.

### YOUR CODE HERE ###
#plt.xticks(rotation=90)


# Display the plot.

### YOUR CODE HERE ###
#plt.show()

"""<details>
  <summary><h4><strong>Hint 1</strong></h4></summary>

Refer to [the content about creating a bar plot](https://www.coursera.org/learn/go-beyond-the-numbers-translate-data-into-insight/lecture/0GjvK/date-string-manipulations-with-python).

</details>

<details>
  <summary><h4><strong>Hint 2</strong></h4></summary>

Use the function in the `seaborn` library that allows you to create a bar plot where the height of each bar is the average value for the corresponding category, by default.

Use the functions in the `matplotlib.pyplot` module that allow you to set the size, title, x-axis label, and y-axis label of plots. In that module, there are also functions for rotating the labels on the x-axis and displaying the plot.

</details>

<details>
  <summary><h4><strong>Hint 3</strong></h4></summary>

Use the `barplot()` function from `seaborn`, passing in the parameters `x`, `y`, and `ci`. To keep confidence interval lines from appearing on the bar plot,  set `ci` to `False`.

Use `plt.figure()`, passing in the `figsize` parameter to set the size of a plot.

Use `plt.title()`, `plt.xlabel()`, `plt.ylabel()` to set the title, x-axis label, and y-axis label, respectively.

Use `plt.xticks()` to rotate labels on the x-axis of a plot. Paass in the parameters `rotation=45, horizontalalignment='right'` to rotate the labels by 45 degrees and align the labels to the right.

Use `plt.show()` to display a plot.

</details>

**Question:** What do you observe from the bar plot of the number of companies that joined per interval for the year of interest?

[Write your response here. Double-click (or enter) to edit.]

### Visualize the average valuation over the quarters

Using the subset of companies that joined in the years of interest, create a grouped bar plot to visualize the average valuation over the quarters, with two bars for each time interval. There will be two bars for each time interval. This allows you to compare quarterly values between the two years.
"""

# Using slicing, extract the year component and the time interval that you specified,
# and save them by adding two new columns into the subset.

### YOUR CODE HERE ###

# Extract the year and time interval components
subset['Year'] = subset['Date Joined'].dt.year
subset['Quarter'] = subset['Date Joined'].dt.quarter

# Create a grouped bar plot
plt.figure(figsize=(10, 6))
width = 0.35
x = np.arange(len(subset['Time Interval']))
plt.bar(x - width/2, subset[2015], width, label='2015')
plt.bar(x + width/2, subset[2016], width, label='2016')

# Set labels and title
plt.xlabel('Time Interval')
plt.ylabel('Average Valuation')
plt.title('Average Valuation Over Quarters')
plt.xticks(x, subset['Time Interval'])
plt.legend()

plt.show()


# Set the size of the plot.

### YOUR CODE HERE ###



# Create a grouped bar plot.

### YOUR CODE HERE ###



# Set the x-axis label.

### YOUR CODE HERE ###



# Set the y-axis label.

### YOUR CODE HERE ###



# Set the title.

### YOUR CODE HERE ###



# Display the plot.

### YOUR CODE HERE ###

"""<details>
  <summary><h4><strong>Hint 1</strong></h4></summary>

Refer to [the content about creating a grouped bar plot](https://www.coursera.org/learn/go-beyond-the-numbers-translate-data-into-insight/lecture/Pf6KW/eda-structuring-with-python).

</details>

<details>
  <summary><h4><strong>Hint 2</strong></h4></summary>

Use the function in the `seaborn` library that allows you to create a grouped bar plot, specifying the category and height for each bar, as well as the hue.

Use the functions in the `matplotlib.pyplot` module that allow you to set the size, title, x-axis label, and y-axis label of plots. In that module, there is also a function for displaying the plot.

</details>

<details>
  <summary><h4><strong>Hint 3</strong></h4></summary>

Use the `plt.bar()` to create the bar plot, passing in the parameters `x`, `y`, and `hue`. For the task at hand, set `hue` to the column that contains year joined.

Use `plt.figure()`, passing in the `figsize` parameter to set the size of a plot.

Use `plt.title()`, `plt.xlabel()`, `plt.ylabel()` to set the title, x-axis label, and y-axis label, respectively.

Use `plt.show()` to display a plot.

</details>

**Question:** What do you observe from the preceding grouped bar plot?

[Write your response here. Double-click (or enter) to edit.]

**Question:** Is there any bias in the data that could potentially inform your analysis?

[Write your response here. Double-click (or enter) to edit.]

**Question:** What potential next steps could you take with your EDA?

[Write your response here. Double-click (or enter) to edit.]

**Question:** Are there any unanswered questions you have about the data? If yes, what are they?

[Write your response here. Double-click (or enter) to edit.]

## Considerations

**What are some key takeaways that you learned from this lab?**

[Write your response here. Double-click (or enter) to edit.]

**What findings would you share with others?**

[Write your response here. Double-click (or enter) to edit.]

**What recommendations would you share with stakeholders based on these findings?**

[Write your response here. Double-click (or enter) to edit.]

**References**

Bhat, M.A. (2022, March).[*Unicorn Companies*](https://www.kaggle.com/datasets/mysarahmadbhat/unicorn-companies).
"""